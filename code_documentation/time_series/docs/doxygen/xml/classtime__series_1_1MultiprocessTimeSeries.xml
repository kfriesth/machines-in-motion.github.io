<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtime__series_1_1MultiprocessTimeSeries" kind="class" language="C++" prot="public">
    <compoundname>time_series::MultiprocessTimeSeries</compoundname>
    <basecompoundref prot="public" virt="non-virtual">internal::TimeSeriesBase&lt; internal::MultiProcesses, T &gt;</basecompoundref>
    <includes refid="multiprocess__time__series_8hpp" local="no">multiprocess_time_series.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
        <defval>int</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classtime__series_1_1MultiprocessTimeSeries_1a0ae05ba33e9f73f839e2229677062518" prot="protected" static="no" mutable="no">
        <type>shared_memory::array&lt; Index &gt;</type>
        <definition>shared_memory::array&lt;Index&gt; time_series::MultiprocessTimeSeries&lt; T &gt;::indexes_</definition>
        <argsstring></argsstring>
        <name>indexes_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/multiprocess_time_series.hpp" line="104" column="1" bodyfile="include/time_series/multiprocess_time_series.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtime__series_1_1MultiprocessTimeSeries_1a118890497b42365a56221c66edbb478e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>time_series::MultiprocessTimeSeries&lt; T &gt;::MultiprocessTimeSeries</definition>
        <argsstring>(std::string segment_id, size_t max_length, bool leader=true, Index start_timeindex=0)</argsstring>
        <name>MultiprocessTimeSeries</name>
        <param>
          <type>std::string</type>
          <declname>segment_id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>max_length</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>leader</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>Index</type>
          <declname>start_timeindex</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>create a new instance pointing to the specified shared memory segment </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>segment_id</parametername>
</parameternamelist>
<parameterdescription>
<para>the id of the segment to point to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_length</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of elements in the time series </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>leader</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, the shared memory segment will initialize the shared time series, and wiped the related shared memory on destruction. Instantiating a first <ref refid="classtime__series_1_1MultiprocessTimeSeries" kindref="compound">MultiprocessTimeSeries</ref> with leader set to false will result in undefined behavior. When the leader instance is destroyed, other instances are pointing to the shared segment may crash or hang. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/multiprocess_time_series.hpp" line="61" column="1" bodyfile="include/time_series/multiprocess_time_series.hpp" bodystart="61" bodyend="85"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classtime__series_1_1MultiprocessTimeSeries_1a44445322f664019684a02caa31639c14" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void time_series::MultiprocessTimeSeries&lt; T &gt;::read_indexes</definition>
        <argsstring>()</argsstring>
        <name>read_indexes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/multiprocess_time_series.hpp" line="88" column="1" bodyfile="include/time_series/multiprocess_time_series.hpp" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classtime__series_1_1MultiprocessTimeSeries_1abc59736f908b8e3f4e6881607e2253a7" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void time_series::MultiprocessTimeSeries&lt; T &gt;::write_indexes</definition>
        <argsstring>()</argsstring>
        <name>write_indexes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/time_series/multiprocess_time_series.hpp" line="96" column="1" bodyfile="include/time_series/multiprocess_time_series.hpp" bodystart="96" bodyend="102"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Multiprocess Time Series. </para>    </briefdescription>
    <detaileddescription>
<para>Several instances hosted by different processes, if pointing to the same shared memory segment (as specified by the segment_id), may read/write from the same underlying time series. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="0">
        <label>time_series::MultiprocessTimeSeries&lt; T &gt;</label>
        <link refid="classtime__series_1_1MultiprocessTimeSeries"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>internal::TimeSeriesBase&lt; internal::MultiProcesses, T &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>time_series::MultiprocessTimeSeries&lt; T &gt;</label>
        <link refid="classtime__series_1_1MultiprocessTimeSeries"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>internal::TimeSeriesBase&lt; internal::MultiProcesses, T &gt;</label>
      </node>
    </collaborationgraph>
    <location file="include/time_series/multiprocess_time_series.hpp" line="47" column="1" bodyfile="include/time_series/multiprocess_time_series.hpp" bodystart="45" bodyend="105"/>
    <listofallmembers>
      <member refid="classtime__series_1_1MultiprocessTimeSeries_1a0ae05ba33e9f73f839e2229677062518" prot="protected" virt="non-virtual"><scope>time_series::MultiprocessTimeSeries</scope><name>indexes_</name></member>
      <member refid="classtime__series_1_1MultiprocessTimeSeries_1a118890497b42365a56221c66edbb478e" prot="public" virt="non-virtual"><scope>time_series::MultiprocessTimeSeries</scope><name>MultiprocessTimeSeries</name></member>
      <member refid="classtime__series_1_1MultiprocessTimeSeries_1a44445322f664019684a02caa31639c14" prot="protected" virt="non-virtual"><scope>time_series::MultiprocessTimeSeries</scope><name>read_indexes</name></member>
      <member refid="classtime__series_1_1MultiprocessTimeSeries_1abc59736f908b8e3f4e6881607e2253a7" prot="protected" virt="non-virtual"><scope>time_series::MultiprocessTimeSeries</scope><name>write_indexes</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="serializer_8hxx" kind="file" language="C++">
    <compoundname>serializer.hxx</compoundname>
    <includedby refid="serializer_8hpp" local="yes">include/shared_memory/serializer.hpp</includedby>
    <invincdepgraph>
      <node id="994">
        <label>demos/demo_write_array.cpp</label>
        <link refid="demo__write__array_8cpp"/>
      </node>
      <node id="992">
        <label>include/shared_memory/array.hpp</label>
        <link refid="array_8hpp_source"/>
        <childnode refid="993" relation="include">
        </childnode>
        <childnode refid="994" relation="include">
        </childnode>
      </node>
      <node id="990">
        <label>include/shared_memory/serializer.hxx</label>
        <link refid="serializer_8hxx"/>
        <childnode refid="991" relation="include">
        </childnode>
      </node>
      <node id="995">
        <label>include/shared_memory/demos/four_int_values.hpp</label>
        <link refid="four__int__values_8hpp"/>
        <childnode refid="996" relation="include">
        </childnode>
        <childnode refid="997" relation="include">
        </childnode>
        <childnode refid="998" relation="include">
        </childnode>
        <childnode refid="999" relation="include">
        </childnode>
      </node>
      <node id="1011">
        <label>src/shared_memory.cpp</label>
        <link refid="shared__memory_8cpp"/>
      </node>
      <node id="991">
        <label>include/shared_memory/serializer.hpp</label>
        <link refid="serializer_8hpp_source"/>
        <childnode refid="992" relation="include">
        </childnode>
        <childnode refid="995" relation="include">
        </childnode>
        <childnode refid="1000" relation="include">
        </childnode>
      </node>
      <node id="1005">
        <label>include/shared_memory/locked_condition_variable.hpp</label>
        <link refid="locked__condition__variable_8hpp_source"/>
      </node>
      <node id="1000">
        <label>include/shared_memory/shared_memory.hpp</label>
        <link refid="shared__memory_8hpp"/>
        <childnode refid="1001" relation="include">
        </childnode>
        <childnode refid="1002" relation="include">
        </childnode>
        <childnode refid="1003" relation="include">
        </childnode>
        <childnode refid="1004" relation="include">
        </childnode>
        <childnode refid="992" relation="include">
        </childnode>
        <childnode refid="1005" relation="include">
        </childnode>
        <childnode refid="1006" relation="include">
        </childnode>
        <childnode refid="1009" relation="include">
        </childnode>
        <childnode refid="1010" relation="include">
        </childnode>
        <childnode refid="1011" relation="include">
        </childnode>
      </node>
      <node id="1004">
        <label>demos/set_data.cpp</label>
        <link refid="set__data_8cpp"/>
      </node>
      <node id="1002">
        <label>benchmarks/stress_set_api.cpp</label>
        <link refid="stress__set__api_8cpp"/>
      </node>
      <node id="1006">
        <label>include/shared_memory/mutex.hpp</label>
        <link refid="mutex_8hpp_source"/>
        <childnode refid="992" relation="include">
        </childnode>
        <childnode refid="1007" relation="include">
        </childnode>
        <childnode refid="1005" relation="include">
        </childnode>
      </node>
      <node id="993">
        <label>demos/demo_read_array.cpp</label>
        <link refid="demo__read__array_8cpp"/>
      </node>
      <node id="1010">
        <label>include/shared_memory/shared_memory.hxx</label>
        <link refid="shared__memory_8hxx"/>
        <childnode refid="1000" relation="include">
        </childnode>
      </node>
      <node id="996">
        <label>demos/exchange_manager_consumer.cpp</label>
        <link refid="exchange__manager__consumer_8cpp"/>
      </node>
      <node id="997">
        <label>demos/exchange_manager_demo.cpp</label>
        <link refid="exchange__manager__demo_8cpp"/>
      </node>
      <node id="998">
        <label>demos/exchange_manager_producer.cpp</label>
        <link refid="exchange__manager__producer_8cpp"/>
      </node>
      <node id="1008">
        <label>include/shared_memory/condition_variable.hpp</label>
        <link refid="condition__variable_8hpp_source"/>
      </node>
      <node id="999">
        <label>demos/four_int_values.cpp</label>
        <link refid="four__int__values_8cpp"/>
      </node>
      <node id="1001">
        <label>benchmarks/stress_get_api.cpp</label>
        <link refid="stress__get__api_8cpp"/>
      </node>
      <node id="1009">
        <label>include/shared_memory/serializable_exchange.hpp</label>
        <link refid="serializable__exchange_8hpp"/>
      </node>
      <node id="1003">
        <label>demos/get_data.cpp</label>
        <link refid="get__data_8cpp"/>
      </node>
      <node id="1007">
        <label>include/shared_memory/lock.hpp</label>
        <link refid="lock_8hpp_source"/>
        <childnode refid="1008" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceshared__memory">shared_memory</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceshared__memory" kindref="compound">shared_memory</ref></highlight></codeline>
<codeline lineno="3"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Serializable&gt;</highlight></codeline>
<codeline lineno="5" refid="classshared__memory_1_1Serializer_1a61ea01a0e5e28fc24c9274455050b1c1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="classshared__memory_1_1Serializer_1a61ea01a0e5e28fc24c9274455050b1c1" kindref="member">Serializer&lt;Serializable&gt;::serialize</ref>(</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classSerializable" kindref="compound">Serializable</ref>&amp;<sp/>serializable)</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>cereal::BinaryOutputArchive<sp/>boa(ss);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>boa(serializable);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>data_<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Serializable&gt;</highlight></codeline>
<codeline lineno="16" refid="classshared__memory_1_1Serializer_1a8f674c9b3a7c053403112d2fad4e09a9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1Serializer_1a8f674c9b3a7c053403112d2fad4e09a9" kindref="member">Serializer&lt;Serializable&gt;::deserialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>data,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classSerializable" kindref="compound">Serializable</ref>&amp;<sp/>serializable)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss(data);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>cereal::BinaryInputArchive<sp/>bia(ss);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>bia(serializable);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Serializable&gt;</highlight></codeline>
<codeline lineno="25" refid="classshared__memory_1_1Serializer_1af5edd0af254d6061e8e18c0bbec10aa9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1Serializer_1af5edd0af254d6061e8e18c0bbec10aa9" kindref="member">Serializer&lt;Serializable&gt;::serializable_size</ref>()</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSerializable" kindref="compound">Serializable</ref><sp/>serializable;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1Serializer" kindref="compound">Serializer&lt;Serializable&gt;</ref><sp/>serializer;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>data<sp/>=<sp/>serializer.<ref refid="classshared__memory_1_1Serializer_1a61ea01a0e5e28fc24c9274455050b1c1" kindref="member">serialize</ref>(serializable);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data.size();</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>shared_memory</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/shared_memory/serializer.hxx"/>
  </compounddef>
</doxygen>

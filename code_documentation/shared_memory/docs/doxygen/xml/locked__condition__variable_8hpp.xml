<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="locked__condition__variable_8hpp" kind="file" language="C++">
    <compoundname>locked_condition_variable.hpp</compoundname>
    <includes local="no">memory</includes>
    <includes local="no">boost/interprocess/sync/named_condition.hpp</includes>
    <includes local="no">boost/interprocess/sync/named_mutex.hpp</includes>
    <includes local="no">boost/interprocess/sync/scoped_lock.hpp</includes>
    <includes refid="mutex_8hpp" local="yes">shared_memory/mutex.hpp</includes>
    <includes refid="shared__memory_8hpp" local="yes">shared_memory/shared_memory.hpp</includes>
    <includedby refid="cond__var__timeout_8cpp" local="yes">demos/cond_var_timeout.cpp</includedby>
    <includedby refid="locked__cond__var__ping_8cpp" local="yes">demos/locked_cond_var_ping.cpp</includedby>
    <includedby refid="locked__cond__var__pong_8cpp" local="yes">demos/locked_cond_var_pong.cpp</includedby>
    <includedby refid="locked__condition__variable_8cpp" local="yes">src/locked_condition_variable.cpp</includedby>
    <includedby refid="wrappers_8cpp" local="yes">srcpy/wrappers.cpp</includedby>
    <incdepgraph>
      <node id="871">
        <label>shared_memory/serializer.hxx</label>
        <link refid="serializer_8hxx_source"/>
      </node>
      <node id="867">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="862">
        <label>shared_memory/exceptions.h</label>
        <link refid="exceptions_8h"/>
        <childnode refid="863" relation="include">
        </childnode>
        <childnode refid="851" relation="include">
        </childnode>
        <childnode refid="864" relation="include">
        </childnode>
        <childnode refid="854" relation="include">
        </childnode>
      </node>
      <node id="848">
        <label>boost/interprocess/sync/scoped_lock.hpp</label>
      </node>
      <node id="866">
        <label>shared_memory/serializer.hpp</label>
        <link refid="serializer_8hpp_source"/>
        <childnode refid="867" relation="include">
        </childnode>
        <childnode refid="868" relation="include">
        </childnode>
        <childnode refid="869" relation="include">
        </childnode>
        <childnode refid="864" relation="include">
        </childnode>
        <childnode refid="870" relation="include">
        </childnode>
        <childnode refid="871" relation="include">
        </childnode>
      </node>
      <node id="850">
        <label>shared_memory/shared_memory.hpp</label>
        <link refid="shared__memory_8hpp"/>
        <childnode refid="851" relation="include">
        </childnode>
        <childnode refid="852" relation="include">
        </childnode>
        <childnode refid="853" relation="include">
        </childnode>
        <childnode refid="854" relation="include">
        </childnode>
        <childnode refid="855" relation="include">
        </childnode>
        <childnode refid="856" relation="include">
        </childnode>
        <childnode refid="857" relation="include">
        </childnode>
        <childnode refid="858" relation="include">
        </childnode>
        <childnode refid="859" relation="include">
        </childnode>
        <childnode refid="860" relation="include">
        </childnode>
        <childnode refid="861" relation="include">
        </childnode>
        <childnode refid="862" relation="include">
        </childnode>
        <childnode refid="865" relation="include">
        </childnode>
        <childnode refid="866" relation="include">
        </childnode>
        <childnode refid="872" relation="include">
        </childnode>
      </node>
      <node id="844">
        <label>include/shared_memory/locked_condition_variable.hpp</label>
        <link refid="locked__condition__variable_8hpp"/>
        <childnode refid="845" relation="include">
        </childnode>
        <childnode refid="846" relation="include">
        </childnode>
        <childnode refid="847" relation="include">
        </childnode>
        <childnode refid="848" relation="include">
        </childnode>
        <childnode refid="849" relation="include">
        </childnode>
        <childnode refid="850" relation="include">
        </childnode>
      </node>
      <node id="859">
        <label>boost/interprocess/containers/string.hpp</label>
      </node>
      <node id="854">
        <label>string</label>
      </node>
      <node id="852">
        <label>map</label>
      </node>
      <node id="863">
        <label>exception</label>
      </node>
      <node id="849">
        <label>shared_memory/mutex.hpp</label>
        <link refid="mutex_8hpp_source"/>
        <childnode refid="847" relation="include">
        </childnode>
        <childnode refid="845" relation="include">
        </childnode>
        <childnode refid="850" relation="include">
        </childnode>
      </node>
      <node id="846">
        <label>boost/interprocess/sync/named_condition.hpp</label>
      </node>
      <node id="872">
        <label>shared_memory/shared_memory.hxx</label>
        <link refid="shared__memory_8hxx"/>
        <childnode refid="850" relation="include">
        </childnode>
      </node>
      <node id="860">
        <label>boost/interprocess/containers/vector.hpp</label>
      </node>
      <node id="847">
        <label>boost/interprocess/sync/named_mutex.hpp</label>
      </node>
      <node id="855">
        <label>vector</label>
      </node>
      <node id="858">
        <label>boost/interprocess/containers/deque.hpp</label>
      </node>
      <node id="870">
        <label>utility</label>
      </node>
      <node id="864">
        <label>sstream</label>
      </node>
      <node id="857">
        <label>boost/interprocess/allocators/allocator.hpp</label>
      </node>
      <node id="851">
        <label>iostream</label>
      </node>
      <node id="865">
        <label>shared_memory/segment_info.hpp</label>
        <link refid="segment__info_8hpp_source"/>
        <childnode refid="861" relation="include">
        </childnode>
        <childnode refid="851" relation="include">
        </childnode>
      </node>
      <node id="853">
        <label>mutex</label>
      </node>
      <node id="856">
        <label>eigen3/Eigen/Core</label>
      </node>
      <node id="868">
        <label>cereal/types/array.hpp</label>
      </node>
      <node id="861">
        <label>boost/interprocess/managed_shared_memory.hpp</label>
      </node>
      <node id="869">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="845">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classshared__memory_1_1LockedConditionVariable" prot="public">shared_memory::LockedConditionVariable</innerclass>
    <innernamespace refid="namespaceshared__memory">shared_memory</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2019<sp/>Max<sp/>Planck<sp/>Gesellschaft<sp/>and<sp/>New<sp/>York<sp/>University</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Authors:<sp/>Vincent<sp/>Berenz,<sp/>Maximilien<sp/>Naveau</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>defines<sp/>the<sp/>unique_ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/interprocess/sync/named_condition.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/interprocess/sync/named_mutex.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/interprocess/sync/scoped_lock.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shared_memory/mutex.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="shared__memory_8hpp" kindref="compound">shared_memory/shared_memory.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceshared__memory" kindref="compound">shared_memory</ref></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::interprocess::named_condition<sp/>SHMCondition;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::interprocess::scoped_lock&lt;SHMMutex&gt;<sp/>SHMScopeLock;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::interprocess::interprocess_mutex<sp/>UnamedSHMMutex;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::interprocess::interprocess_condition<sp/>UnamedSHMCondition;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::interprocess::scoped_lock&lt;UnamedSHMMutex&gt;<sp/>UnamedSHMLock;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="classshared__memory_1_1LockedConditionVariable" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classshared__memory_1_1LockedConditionVariable" kindref="compound">LockedConditionVariable</ref></highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a648057022bbf8a7b5221e1170b1e099c" kindref="member">LockedConditionVariable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>object_id,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clean_memory_on_destruction<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>~<ref refid="classshared__memory_1_1LockedConditionVariable" kindref="compound">LockedConditionVariable</ref>();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a31633f2243b988dc0a8bd3d4637dc216" kindref="member">notify_all</ref>();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a532a1332fe184e668a49fa002db5be08" kindref="member">notify_one</ref>();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a9eb84ab5d570a0c5a81f6eaeb4c4dd50" kindref="member">wait</ref>();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a0d4ab218fc51fcce34146f2adca408d7" kindref="member">timed_wait</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>wait_nano_seconds);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a86b42b23b94593bca5b12b9d792d1275" kindref="member">try_lock</ref>();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a5d28bb5942fc5bc4886014d6b9b26885" kindref="member">unlock</ref>();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>owns();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a1eef63f7e3e898c3734923c987383ffe" kindref="member">lock_scope</ref>();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1adf3a50665011b3b92b80369bbbc6d4a4" kindref="member">unlock_scope</ref>();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1aa3bca5020f84c8e0a90a2dad3e6521e5" kindref="member">clean</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>segment_id);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="108" refid="classshared__memory_1_1LockedConditionVariable_1a07d7d718e33cc2e833cf9bb22fe8fada" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a07d7d718e33cc2e833cf9bb22fe8fada" kindref="member">mutex_id_</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="classshared__memory_1_1LockedConditionVariable_1a7cf01915f9d1a8795f4e69345cd1e1e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a7cf01915f9d1a8795f4e69345cd1e1e4" kindref="member">condition_id_</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="classshared__memory_1_1LockedConditionVariable_1ae6a197846be3bd4ccf4899754778f16b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::interprocess::managed_shared_memory<sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1ae6a197846be3bd4ccf4899754778f16b" kindref="member">segment_manager_</ref>;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="125" refid="classshared__memory_1_1LockedConditionVariable_1a757abc2190906a0773667b42be6e4e66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>SHMMutex<sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a757abc2190906a0773667b42be6e4e66" kindref="member">mutex_</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="classshared__memory_1_1LockedConditionVariable_1a8bc7fb73332304b406335e38ba4cdd1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>SHMCondition*<sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a8bc7fb73332304b406335e38ba4cdd1b" kindref="member">condition_variable_</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="classshared__memory_1_1LockedConditionVariable_1a5509b431f2d459d92bfcc1b2d60651d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;SHMScopeLock&gt;<sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1a5509b431f2d459d92bfcc1b2d60651d1" kindref="member">lock_</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="classshared__memory_1_1LockedConditionVariable_1abe0963bc5746d19350e816ad42ff47b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classshared__memory_1_1LockedConditionVariable_1abe0963bc5746d19350e816ad42ff47b1" kindref="member">clean_memory_on_destruction_</ref>;</highlight></codeline>
<codeline lineno="143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>shared_memory</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/shared_memory/locked_condition_variable.hpp"/>
  </compounddef>
</doxygen>

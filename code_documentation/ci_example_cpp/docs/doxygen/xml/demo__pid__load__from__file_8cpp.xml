<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="demo__pid__load__from__file_8cpp" kind="file" language="C++">
    <compoundname>demo_pid_load_from_file.cpp</compoundname>
    <includes refid="pid_8hpp" local="yes">ci_example_cpp/pid.hpp</includes>
    <includes refid="file__configuration_8hpp" local="yes">ci_example_cpp/file_configuration.hpp</includes>
    <includes local="no">stdexcept</includes>
    <incdepgraph>
      <node id="14">
        <label>ci_example_cpp/gains_configuration.hpp</label>
        <link refid="gains__configuration_8hpp"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ci_example_cpp/pid.hpp</label>
        <link refid="pid_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>stdexcept</label>
      </node>
      <node id="15">
        <label>string</label>
      </node>
      <node id="13">
        <label>ci_example_cpp/default_configuration.hpp</label>
        <link refid="default__configuration_8hpp"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>yaml-cpp/yaml.h</label>
      </node>
      <node id="17">
        <label>ci_example_cpp/file_configuration.hpp</label>
        <link refid="file__configuration_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>vector</label>
      </node>
      <node id="16">
        <label>iostream</label>
      </node>
      <node id="9">
        <label>demos/demo_pid_load_from_file.cpp</label>
        <link refid="demo__pid__load__from__file_8cpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="demo__pid__load__from__file_8cpp_1aa5343637e5c7a19c19aae1beed976ab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void run_demo</definition>
        <argsstring>()</argsstring>
        <name>run_demo</name>
        <briefdescription>
<para>Run some demo using a YAML file as configuration for the PID controller. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_pid_load_from_file.cpp" line="24" column="1" bodyfile="demos/demo_pid_load_from_file.cpp" bodystart="24" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="demo__pid__load__from__file_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
<para>Run the demo in a safe environment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="demos/demo_pid_load_from_file.cpp" line="73" column="1" bodyfile="demos/demo_pid_load_from_file.cpp" bodystart="73" bodyend="84"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Example of a demo that requires to read a config file. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Vincent Berenz license License BSD-3-Clause </para></simplesect>
<simplesect kind="copyright"><para>Copyright (c) 2019, New York University and Max Planck Gesellshaft. </para></simplesect>
<simplesect kind="date"><para>2019-05-22</para></simplesect>
<simplesect kind="see"><para><ulink url="https://git-amd.tuebingen.mpg.de/amd-clmc/ci_example/wikis/catkin:-how-to-implement-a-demo">https://git-amd.tuebingen.mpg.de/amd-clmc/ci_example/wikis/catkin:-how-to-implement-a-demo</ulink> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="16"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pid_8hpp" kindref="compound">ci_example_cpp/pid.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="file__configuration_8hpp" kindref="compound">ci_example_cpp/file_configuration.hpp</ref>&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="demo__pid__load__from__file_8cpp_1aa5343637e5c7a19c19aae1beed976ab6" kindref="member">run_demo</ref>(){</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>displaying<sp/>what<sp/>this<sp/>demo<sp/>is<sp/>about<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>demo<sp/>shows<sp/>how<sp/>to<sp/>create<sp/>an<sp/>executable<sp/>run<sp/>by<sp/>the<sp/>continuous<sp/>integration\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;which<sp/>depends<sp/>on<sp/>a<sp/>configuration<sp/>file.<sp/>In<sp/>the<sp/>solution<sp/>showed<sp/>here,<sp/>the<sp/>absolute<sp/>path\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;to<sp/>the<sp/>configuration<sp/>file<sp/>is<sp/>set<sp/>during<sp/>pre-compilation.<sp/>See<sp/>code<sp/>in<sp/>/demos/demo_pid_load_from_file.cpp\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;for<sp/>details\n\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>reading<sp/>gains<sp/>(kp,kd,ki)<sp/>from<sp/>yaml<sp/>config<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>(look<sp/>at<sp/>the<sp/>CMakeLists.txt<sp/>to<sp/>see<sp/>why<sp/>TEST_PID_GAINS_YAML_FILE_PATH<sp/>is<sp/>replaced<sp/>by<sp/>correct<sp/>abs<sp/>path<sp/><sp/>during<sp/>compilation)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>std::string<sp/>config_file_path<sp/>=<sp/>TEST_PID_GAINS_YAML_FILE_PATH;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gains_configuration<sp/>is<sp/>the<sp/>base<sp/>class<sp/>for<sp/>all<sp/>configuration,<sp/>including</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>one<sp/>read<sp/>from<sp/>yaml<sp/>file,<sp/>as<sp/>done<sp/>here.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="classci__example__cpp_1_1File__configuration" kindref="compound">ci_example_cpp::File_configuration</ref><sp/>gains<sp/>=<sp/><ref refid="classci__example__cpp_1_1File__configuration" kindref="compound">ci_example_cpp::File_configuration</ref>(config_file_path);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>printing<sp/>to<sp/>standard<sp/>output<sp/>the<sp/>gains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gains<sp/>read<sp/>from<sp/>configuration<sp/>file:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><ref refid="gains__configuration_8hpp_1a2400ff05e31dee6aced75d9c230b9fe5" kindref="member">ci_example_cpp::print_configuration</ref>(gains);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>checking<sp/>reading<sp/>the<sp/>config<sp/>file<sp/>when<sp/>fine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>not,<sp/>throwing<sp/>corresponding<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gains.<ref refid="classci__example__cpp_1_1File__configuration_1aa3cae137be3b59e61d13c2a9b1ec8b6a" kindref="member">has_error</ref>()){</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(gains.<ref refid="classci__example__cpp_1_1File__configuration_1aaf67f7d61d467563a4dce8aa69306a6a" kindref="member">get_error</ref>());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>creating<sp/>and<sp/>running<sp/>the<sp/>controller<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>PID<sp/>controller<sp/>creation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="classci__example__cpp_1_1PID" kindref="compound">ci_example_cpp::PID</ref><sp/>controller(gains);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>example<sp/>of<sp/>force<sp/>computation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_position=1;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>current_velocity=1;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>delta_time=0.01;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>target_position=2;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>force<sp/>=<sp/>controller.compute(current_position,current_velocity,target_position,delta_time);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>std::cout&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;computed<sp/>force:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>force<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>resetting<sp/>integral<sp/>of<sp/>the<sp/>controller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>controller.reset_integral();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="demo__pid__load__from__file_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>(){</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="demo__pid__load__from__file_8cpp_1aa5343637e5c7a19c19aae1beed976ab6" kindref="member">run_demo</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::runtime_error&amp;<sp/>e){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;demo<sp/>failed<sp/>!\nerror<sp/>message:\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>e.what()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight><highlight class="comment">//<sp/>informs<sp/>continuous<sp/>integration<sp/>that<sp/>this<sp/>demo<sp/>did<sp/>not<sp/>run<sp/>successfully</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/></highlight><highlight class="comment">//<sp/>informs<sp/>continuous<sp/>integration<sp/>that<sp/>this<sp/>demo<sp/>did<sp/>run<sp/>successfully</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="demos/demo_pid_load_from_file.cpp"/>
  </compounddef>
</doxygen>

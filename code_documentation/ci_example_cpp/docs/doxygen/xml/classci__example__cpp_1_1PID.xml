<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classci__example__cpp_1_1PID" kind="class" language="C++" prot="public">
    <compoundname>ci_example_cpp::PID</compoundname>
    <includes refid="pid_8hpp" local="no">pid.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classci__example__cpp_1_1PID_1ad289b145cf9572e57c5c691c065643b7" prot="private" static="no" mutable="no">
        <type>const <ref refid="classci__example__cpp_1_1Gains__configuration" kindref="compound">Gains_configuration</ref> *</type>
        <definition>const Gains_configuration* ci_example_cpp::PID::configuration_</definition>
        <argsstring></argsstring>
        <name>configuration_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ci_example_cpp/pid.hpp" line="56" column="1" bodyfile="include/ci_example_cpp/pid.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classci__example__cpp_1_1PID_1a005833b068e3b78b6715599859202ebe" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool ci_example_cpp::PID::private_configuration_</definition>
        <argsstring></argsstring>
        <name>private_configuration_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ci_example_cpp/pid.hpp" line="57" column="1" bodyfile="include/ci_example_cpp/pid.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classci__example__cpp_1_1PID_1aebc028e332ec559269e2623de62c4cea" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double ci_example_cpp::PID::integral_</definition>
        <argsstring></argsstring>
        <name>integral_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ci_example_cpp/pid.hpp" line="58" column="1" bodyfile="include/ci_example_cpp/pid.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classci__example__cpp_1_1PID_1a8e82fde951fff38658098ff84bbb5cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ci_example_cpp::PID::PID</definition>
        <argsstring>()</argsstring>
        <name>PID</name>
        <briefdescription>
<para>Construct a default <ref refid="classci__example__cpp_1_1PID" kindref="compound">PID</ref> object using the <ref refid="classci__example__cpp_1_1DefaultConfiguration" kindref="compound">DefaultConfiguration</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ci_example_cpp/pid.hpp" line="27" column="1" bodyfile="src/pid.cpp" bodystart="12" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="classci__example__cpp_1_1PID_1a5bbb703065bfd4c49b8d21e02d481c3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ci_example_cpp::PID::PID</definition>
        <argsstring>(const Gains_configuration &amp;configuration)</argsstring>
        <name>PID</name>
        <param>
          <type>const <ref refid="classci__example__cpp_1_1Gains__configuration" kindref="compound">Gains_configuration</ref> &amp;</type>
          <declname>configuration</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classci__example__cpp_1_1PID" kindref="compound">PID</ref> object using a user provided configuration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configuration</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ci_example_cpp/pid.hpp" line="33" column="1" bodyfile="src/pid.cpp" bodystart="19" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="classci__example__cpp_1_1PID_1a38c585d84ad8f3c233bc654e6353466c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ci_example_cpp::PID::~PID</definition>
        <argsstring>()</argsstring>
        <name>~PID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ci_example_cpp/pid.hpp" line="34" column="1" bodyfile="src/pid.cpp" bodystart="23" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classci__example__cpp_1_1PID_1a75a4ccf0455e48e84af23e1d28b0337d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double ci_example_cpp::PID::compute</definition>
        <argsstring>(const double position, const double velocity, const double position_target, const double delta_time)</argsstring>
        <name>compute</name>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>velocity</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>position_target</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>delta_time</declname>
        </param>
        <briefdescription>
<para>compute the force related to the pid controller. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>this function is not stateless, as it performs integration. Call reset_pid() to reset the integral part. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>current position </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>current velocity </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position_target</parametername>
</parameternamelist>
<parameterdescription>
<para>target position </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta_time</parametername>
</parameternamelist>
<parameterdescription>
<para>time passed since last measurement. Used for integral computation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>computed force </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ci_example_cpp/pid.hpp" line="46" column="1" bodyfile="src/pid.cpp" bodystart="30" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classci__example__cpp_1_1PID_1a65d98fccd38cc385debc3d15670caf0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ci_example_cpp::PID::reset_integral</definition>
        <argsstring>()</argsstring>
        <name>reset_integral</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reset integral part of the <ref refid="classci__example__cpp_1_1PID" kindref="compound">PID</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/ci_example_cpp/pid.hpp" line="52" column="1" bodyfile="src/pid.cpp" bodystart="43" bodyend="45"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Simple 1D pid controller. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="16">
        <label>ci_example_cpp::PID</label>
        <link refid="classci__example__cpp_1_1PID"/>
        <childnode refid="17" relation="usage">
          <edgelabel>configuration_</edgelabel>
        </childnode>
      </node>
      <node id="17">
        <label>ci_example_cpp::Gains_configuration</label>
        <link refid="classci__example__cpp_1_1Gains__configuration"/>
      </node>
    </collaborationgraph>
    <location file="include/ci_example_cpp/pid.hpp" line="20" column="1" bodyfile="include/ci_example_cpp/pid.hpp" bodystart="20" bodyend="60"/>
    <listofallmembers>
      <member refid="classci__example__cpp_1_1PID_1a75a4ccf0455e48e84af23e1d28b0337d" prot="public" virt="non-virtual"><scope>ci_example_cpp::PID</scope><name>compute</name></member>
      <member refid="classci__example__cpp_1_1PID_1ad289b145cf9572e57c5c691c065643b7" prot="private" virt="non-virtual"><scope>ci_example_cpp::PID</scope><name>configuration_</name></member>
      <member refid="classci__example__cpp_1_1PID_1aebc028e332ec559269e2623de62c4cea" prot="private" virt="non-virtual"><scope>ci_example_cpp::PID</scope><name>integral_</name></member>
      <member refid="classci__example__cpp_1_1PID_1a8e82fde951fff38658098ff84bbb5cbe" prot="public" virt="non-virtual"><scope>ci_example_cpp::PID</scope><name>PID</name></member>
      <member refid="classci__example__cpp_1_1PID_1a5bbb703065bfd4c49b8d21e02d481c3d" prot="public" virt="non-virtual"><scope>ci_example_cpp::PID</scope><name>PID</name></member>
      <member refid="classci__example__cpp_1_1PID_1a005833b068e3b78b6715599859202ebe" prot="private" virt="non-virtual"><scope>ci_example_cpp::PID</scope><name>private_configuration_</name></member>
      <member refid="classci__example__cpp_1_1PID_1a65d98fccd38cc385debc3d15670caf0e" prot="public" virt="non-virtual"><scope>ci_example_cpp::PID</scope><name>reset_integral</name></member>
      <member refid="classci__example__cpp_1_1PID_1a38c585d84ad8f3c233bc654e6353466c" prot="public" virt="non-virtual"><scope>ci_example_cpp::PID</scope><name>~PID</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

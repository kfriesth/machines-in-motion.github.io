<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="coding_guidelines_1" kind="page">
    <compoundname>coding_guidelines_1</compoundname>
    <title>2. C++ Coding Guidelines</title>
    <detaileddescription>
<para><heading level="2">I. Introduction</heading>
</para><para>These are the internal C++ guidelines for the <ulink url="https://wp.nyu.edu/machinesinmotion/">machines-in-motion</ulink> group. The same guidelines are used in the <ulink url="https://open-dynamic-robot-initiative.github.io/">Open Dynamic Robot Initiative</ulink></para><para>The following rules present basic guidelines for our C++ code. The goal is to have code that is formatted in a consistent and easily readable way while at the same time not being overly complicated by specifying every detail. For such guidelines to be practical, newcomers should be able to read them within a few minutes and be able to memorize them. So these rules intentionally do not cover every detail but rather aim at specifying only the big, important things.</para><para>If this is too simple for you and you want more rules, you are encouraged to read the <ulink url="https://google.github.io/styleguide/cppguide.html">Google C++ Style Guide</ulink> on which these rules are based. Note, however, that we have a few small deviations from the Google style.</para><para>These guidelines may evolve in time so it is first good practice to check them upon creation of a new package or code refactoring.</para><para><heading level="2">II. Folder Structure and File Naming</heading>
</para><para><itemizedlist>
<listitem><para>Header files should be in a folder: <computeroutput>include/&lt;name_of_the_project&gt;/*</computeroutput>, e.g.<programlisting><codeline><highlight class="normal">`#include<sp/>&quot;ci_example_cpp/gains_configuration.hpp&quot;`<sp/></highlight></codeline>
</programlisting></para></listitem><listitem><para>File extension for header files: <computeroutput>.hpp</computeroutput></para></listitem><listitem><para>Source files should be in a folder named <computeroutput>src/</computeroutput>. The file should have the same name as the header with extension <computeroutput>.cpp</computeroutput>.</para></listitem><listitem><para>When using templates: If you want to separate declaration and definition, put the declaration to a <computeroutput>.hpp</computeroutput> header file as usual and the definition to a file with extension <computeroutput>.hxx</computeroutput> in the same directory (which is included at the bottom of the <computeroutput>.hpp</computeroutput> file).</para></listitem><listitem><para>Preferably each class should be in a separate file with name <emphasis>class_name_in_lower_case</emphasis>. However, this is not a strict rule, if several smaller classes are logically closely related, they may go to the same file.</para></listitem><listitem><para>Executable scripts should be placed in the <computeroutput>scripts/</computeroutput> folder. And should have a CMake <bold>install rule</bold> that makes them executable upon installation.</para></listitem><listitem><para>The C++/pybind11 code for wrapping C++ code to Python must be placed in <computeroutput>srcpy/</computeroutput></para></listitem></itemizedlist>
</para><para><heading level="2">III. Naming</heading>
</para><para>Give as descriptive a name as possible, within reason. Do not worry about saving horizontal space as it is far more important to make your code immediately understandable by a new reader. Do not use abbreviations that are ambiguous or unfamiliar to readers outside your project, and do not abbreviate by deleting letters within a word. Abbreviations that would be familiar to someone outside your project with relevant domain knowledge are OK. As a rule of thumb, an abbreviation is probably OK if it&apos;s listed in Wikipedia.</para><para>Formatting of names should be as follows:</para><para><itemizedlist>
<listitem><para>types (classes, structs, ...): <emphasis>FirstUpperCamelCase</emphasis></para></listitem><listitem><para>functions, methods: <emphasis>lower_case_with_underscores</emphasis></para></listitem><listitem><para>variables: <emphasis>lower_case_with_underscores</emphasis></para></listitem><listitem><para>class members: <emphasis>like_variables_but_with_trailing_underscore_</emphasis></para></listitem><listitem><para>constants: <emphasis>UPPER_CASE_WITH_UNDERSCORES</emphasis></para></listitem><listitem><para>global variables: Should generally be avoided but if needed, prefix them with g_, i.e. <emphasis>g_variable_name</emphasis>.</para></listitem></itemizedlist>
</para><para><heading level="2">IV. Add Units to Variable Names</heading>
</para><para>Variables that hold values of a specific unit should have that unit appended to the name. For example if a variable holds the velocity of a motor in <emphasis>krpm</emphasis> it should be called <computeroutput>velocity_krpm</computeroutput> instead of <computeroutput>just velocity</computeroutput>. Some more examples:</para><para><itemizedlist>
<listitem><para>duration_us (use &quot;u&quot; instead of &quot;Âµ&quot;)</para></listitem><listitem><para>voltage_mV</para></listitem><listitem><para>acceleration_mps2 ( <formula id="0">$ \frac{m}{s^2} $</formula>)</para></listitem></itemizedlist>
</para><para><heading level="2">V. C/C++ Formatting</heading>
</para><para><heading level="3">V.1. Line Length</heading>
</para><para>Limit the length of lines to 80 characters.</para><para>This may seem hard to follow sometimes but makes it much easier to view two or even three files next to each other (important during code review or when resolving merge conflicts).</para><para><heading level="3">V.2. Indentation</heading>
</para><para><itemizedlist>
<listitem><para>Use spaces instead of tabs.</para></listitem><listitem><para>4 spaces per &quot;tab&quot;.</para></listitem></itemizedlist>
</para><para><heading level="3">V.3. Position of braces</heading>
</para><para><itemizedlist>
<listitem><para>Opening brace always goes to the next line.</para></listitem><listitem><para><bold>Always</bold> add braces for single-line if/loop/etc.</para></listitem></itemizedlist>
</para><para>Example:</para><para><programlisting><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bar</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Foo</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>my_function(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Foo<sp/>&amp;foo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*output_arg)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(condition)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other_condition)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(condition)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace</highlight></codeline>
</programlisting></para><para><heading level="3">V.3. Spaces</heading>
</para><para>Add single spaces between if/for/etc., the condition and the brace. add spaces around most binary operators. Exception: No spaces around <computeroutput>::</computeroutput>, <computeroutput>.</computeroutput> and <computeroutput>-&gt;</computeroutput>. Also no spaces for unary operators (<computeroutput>i++</computeroutput>, <computeroutput>&amp;x</computeroutput>, <computeroutput>*x</computeroutput>, ...).</para><para>Example: <programlisting><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>42;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>i<sp/>*<sp/>x;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>==<sp/>foo.bar-&gt;baz)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="3">V.4. Formatting of switch blocks</heading>
</para><para><itemizedlist>
<listitem><para>See the following example for proper indentation of switch blocks.</para></listitem><listitem><para>Always add a default case, even when it is technically not needed.<itemizedlist>
<listitem><para>If the default block is empty, it shall contain a comment to indicate that this is intentional.</para></listitem><listitem><para>The default case shall either be the first or the last case, preferably the last.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Non-empty cases shall be terminated by an unconditional break.</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(x)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/></highlight><highlight class="comment">//<sp/>multiple<sp/>cases<sp/>for<sp/>one<sp/>block<sp/>are<sp/>okay</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BAD.<sp/>A<sp/>non-empty<sp/>case<sp/>without<sp/>break<sp/>should<sp/>not<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>something();<sp/><sp/></highlight><highlight class="comment">//<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>more();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>action<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><heading level="3">V.5. Clang-Format Configuration</heading>
</para><para>To automatically format your code according to this guidelines, you can use clang-format with the configuration <ulink url="https://github.com/machines-in-motion/mpi_cmake_modules/blob/master/python/mpi_cmake_modules/_clang-format">here</ulink>.</para><para><heading level="2">VI. C/C++ Coding Guidelines</heading>
</para><para><heading level="3">VI.1. Pass objects by const reference</heading>
</para><para>In general, non-primitive data types should be passed to functions by const reference instead of by value.</para><para><programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>foobar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Foo<sp/>&amp;foo);<sp/><sp/></highlight><highlight class="comment">//<sp/>good</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>foobar(Foo<sp/>foo);<sp/><sp/></highlight><highlight class="comment">//<sp/>results<sp/>in<sp/>copy<sp/>of<sp/>`foo`.<sp/>Only<sp/>do<sp/>this<sp/>if<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reference<sp/>is<sp/>not<sp/>possible<sp/>for<sp/>some<sp/>reason.</highlight></codeline>
</programlisting></para><para>### VI.2.<programlisting><codeline><highlight class="normal">*#pragma<sp/>once*<sp/></highlight></codeline>
</programlisting> vs Include Guards</para><para>Prefer<programlisting><codeline><highlight class="normal">*#pragma<sp/>once*<sp/></highlight></codeline>
</programlisting> over include guards. <programlisting><codeline><highlight class="normal">*#pragma<sp/>once*<sp/></highlight></codeline>
</programlisting> is not part of the official standard but is widely supported by compilers and much simpler to maintain.</para><para>Note that there are some border cases where<programlisting><codeline><highlight class="normal">*#pragma<sp/>once*<sp/></highlight></codeline>
</programlisting> is causing issues (e.g. on Windows or when having a weird build setup with symlinks or copies of files). In such cases use traditional include guards. Make sure they have unique names by composing them from the package name and the path/name of the file (e.g. MY_PACKAGE_PATH_TO_FILE_FILENAME_H). Please <bold>do not</bold> add underscore as prefix nor suffix beccause this is reserved for the compiler preproccesor variables.</para><para><heading level="3">VI.3. Keep scopes small</heading>
</para><para>Avoid adding anything to the global namespace if possible. This means</para><para><itemizedlist>
<listitem><para>Use a namespace when defining extern symbols.</para></listitem><listitem><para>Use an anonymous namespace or static for symbols that are only used internally.</para></listitem></itemizedlist>
</para><para>Generally define symbols in the smallest possible scope, i.e. if a variable is only used inside one loop, define it inside this loop (however, do not consider this to be a very strict rule, deviate from it where it seems reasonable).</para><para><heading level="3">VI.4. Use types with explicit sizes</heading>
</para><para>The header stdint defines primitive types with explicit sizes: <emphasis>int32_t</emphasis>, <emphasis>uint32_t</emphasis>, <emphasis>int16_t</emphasis>, ... They should be preferred over the build-in types int, unsigned, short, ... To use them add the following include: <programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;stdint&gt;</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="device__simulator_8cpp" kind="file" language="C++">
    <compoundname>device_simulator.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes local="yes">yaml_cpp_catkin/yaml_eigen.h</includes>
    <includes local="no">dynamic-graph/factory.h</includes>
    <includes local="no">dynamic-graph/all-commands.h</includes>
    <includes local="no">dynamic-graph/debug.h</includes>
    <includes refid="device__simulator_8hh" local="no">dynamic_graph_manager/device_simulator.hh</includes>
    <incdepgraph>
      <node id="709">
        <label>list</label>
      </node>
      <node id="700">
        <label>dynamic_graph_manager/device_simulator.hh</label>
        <link refid="device__simulator_8hh"/>
        <childnode refid="701" relation="include">
        </childnode>
        <childnode refid="702" relation="include">
        </childnode>
        <childnode refid="703" relation="include">
        </childnode>
      </node>
      <node id="712">
        <label>dynamic_graph_manager/tools.hh</label>
        <link refid="tools_8hh"/>
        <childnode refid="704" relation="include">
        </childnode>
        <childnode refid="696" relation="include">
        </childnode>
      </node>
      <node id="697">
        <label>dynamic-graph/factory.h</label>
      </node>
      <node id="704">
        <label>dynamic-graph/linear-algebra.h</label>
      </node>
      <node id="711">
        <label>string</label>
      </node>
      <node id="703">
        <label>dynamic_graph_manager/device.hh</label>
        <link refid="device_8hh"/>
        <childnode refid="701" relation="include">
        </childnode>
        <childnode refid="704" relation="include">
        </childnode>
        <childnode refid="702" relation="include">
        </childnode>
        <childnode refid="705" relation="include">
        </childnode>
        <childnode refid="706" relation="include">
        </childnode>
        <childnode refid="712" relation="include">
        </childnode>
      </node>
      <node id="710">
        <label>map</label>
      </node>
      <node id="706">
        <label>dynamic_graph_manager/periodic-call.hh</label>
        <link refid="periodic-call_8hh"/>
        <childnode refid="707" relation="include">
        </childnode>
        <childnode refid="708" relation="include">
        </childnode>
        <childnode refid="702" relation="include">
        </childnode>
        <childnode refid="709" relation="include">
        </childnode>
        <childnode refid="710" relation="include">
        </childnode>
        <childnode refid="711" relation="include">
        </childnode>
      </node>
      <node id="707">
        <label>dynamic-graph/python/interpreter.hh</label>
      </node>
      <node id="698">
        <label>dynamic-graph/all-commands.h</label>
      </node>
      <node id="701">
        <label>yaml-cpp/yaml.h</label>
      </node>
      <node id="708">
        <label>dynamic-graph/signal-base.h</label>
      </node>
      <node id="694">
        <label>src/device_simulator.cpp</label>
        <link refid="device__simulator_8cpp"/>
        <childnode refid="695" relation="include">
        </childnode>
        <childnode refid="696" relation="include">
        </childnode>
        <childnode refid="697" relation="include">
        </childnode>
        <childnode refid="698" relation="include">
        </childnode>
        <childnode refid="699" relation="include">
        </childnode>
        <childnode refid="700" relation="include">
        </childnode>
      </node>
      <node id="695">
        <label>iostream</label>
      </node>
      <node id="705">
        <label>dynamic-graph/all-signals.h</label>
      </node>
      <node id="702">
        <label>dynamic-graph/entity.h</label>
      </node>
      <node id="696">
        <label>yaml_cpp_catkin/yaml_eigen.h</label>
      </node>
      <node id="699">
        <label>dynamic-graph/debug.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacedynamic__graph">dynamic_graph</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Julian Viereck </para></simplesect>
<xrefsect id="license_1_license000042"><xreftitle>License</xreftitle><xrefdescription><para>License BSD-3-Clause </para></xrefdescription></xrefsect><simplesect kind="copyright"><para>Copyright (c) 2019, New York University and Max Planck Gesellschaft. </para></simplesect>
<simplesect kind="date"><para>2019-05-22 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="9"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;yaml_cpp_catkin/yaml_eigen.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dynamic-graph/factory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dynamic-graph/all-commands.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dynamic-graph/debug.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="device__simulator_8hh" kindref="compound">dynamic_graph_manager/device_simulator.hh</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedynamic__graph" kindref="compound">dynamic_graph</ref>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="device_8cpp_1acb2dfe024c01897a987997464d538b28" kindref="member">DYNAMICGRAPH_FACTORY_ENTITY_PLUGIN</ref>(DeviceSimulator,<sp/></highlight><highlight class="stringliteral">&quot;DeviceSimulator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">DeviceSimulator::DeviceSimulator(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>input_name):</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>mother<sp/>class<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>Device(input_name)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DeviceSimulator_1a346995902653feca7707f8c62ab4bf95" kindref="member">DeviceSimulator::initialize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>YAML::Node&amp;<sp/>params)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1Device_1af6edd01afac2838c4e336c76caa4338a" kindref="member">Device::initialize</ref>(params);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>std::string<sp/>hardware_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*******************************</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/>*<sp/>We<sp/>iterate<sp/>over<sp/>the<sp/>sensors<sp/>*</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/>*******************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>simu_sensors_in_.clear();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(VectorDGMap::const_iterator<sp/>sensor_it<sp/>=<sp/>sensors_map_.begin();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensor_it<sp/>!=<sp/>sensors_map_.end();<sp/>++sensor_it)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hardware_name<sp/>=<sp/>sensor_it-&gt;first;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ostringstream<sp/>sig_name;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sig_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Device(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)::&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;input(vector&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>sensor_it-&gt;second.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;d)::&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;simu_in_&quot;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>hardware_name<sp/>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>simu_sensors_in_[hardware_name]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>InSignal(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>sig_name.str());</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>simu_sensors_in_[hardware_name]-&gt;setConstant(sensors_map_[hardware_name]);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>signalRegistration(*(simu_sensors_in_[hardware_name]));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/********************************</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/>*<sp/>We<sp/>iterate<sp/>over<sp/>the<sp/>controls<sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/><sp/>********************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>simu_motor_controls_out_.clear();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(VectorDGMap::const_iterator<sp/>control_it<sp/>=<sp/>motor_controls_map_.begin();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>control_it<sp/>!=<sp/>motor_controls_map_.end();<sp/>++control_it)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hardware_name<sp/>=<sp/>control_it-&gt;first;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ostringstream<sp/>sig_name;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sig_name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Device(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)::&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;output(vector&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>control_it-&gt;second.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;d)::&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;simu_out_&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>hardware_name<sp/>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>simu_motor_controls_out_[hardware_name]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>OutSignal(sig_name.str());</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>simu_motor_controls_out_[hardware_name]-&gt;setConstant(motor_controls_map_[hardware_name]);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>signalRegistration(*(simu_motor_controls_out_[hardware_name]));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DeviceSimulator_1a8a9370f236ba03162be2472c79f865f2" kindref="member">DeviceSimulator::initialize_from_file</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>yaml_file)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>YAML::Node<sp/>params<sp/>=<sp/>YAML::LoadFile(yaml_file);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1DeviceSimulator_1a346995902653feca7707f8c62ab4bf95" kindref="member">DeviceSimulator::initialize</ref>(params[</highlight><highlight class="stringliteral">&quot;device&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdynamic__graph_1_1DeviceSimulator_1a614c51ee8d55765019ae98715f875ed5" kindref="member">DeviceSimulator::execute_graph</ref>()</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*******************************************</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Get<sp/>the<sp/>time<sp/>of<sp/>the<sp/>last<sp/>sensor<sp/>reading<sp/>*</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/>*******************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/***********************************************</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/>*<sp/>We<sp/>copy<sp/>the<sp/>input<sp/>sensor<sp/>in<sp/>the<sp/>output<sp/>ones<sp/>*</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/>***********************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(VectorDGMap::const_iterator<sp/>sensor_it<sp/>=<sp/>sensors_map_.begin();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensor_it<sp/>!=<sp/>sensors_map_.end();<sp/>++sensor_it)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>sensors_out_[sensor_it-&gt;first]-&gt;setConstant(</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>simu_sensors_in_[sensor_it-&gt;first]-&gt;accessCopy());</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/**************************************</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/>*<sp/>We<sp/>call<sp/>the<sp/>execution<sp/>of<sp/>the<sp/>graph<sp/>*</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/>**************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>execute<sp/>the<sp/>mother<sp/>class<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="classdynamic__graph_1_1Device_1adb596e7acd67089bb4929cf577b3c6ff" kindref="member">Device::execute_graph</ref>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*************************************************</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/>*<sp/>We<sp/>copy<sp/>the<sp/>input<sp/>control<sp/>in<sp/>an<sp/>output<sp/>signal<sp/>*</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/>*************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(VectorDGMap::const_iterator<sp/>control_it<sp/>=<sp/>motor_controls_map_.begin();</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>control_it<sp/>!=<sp/>motor_controls_map_.end();<sp/>++control_it)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>simu_motor_controls_out_[control_it-&gt;first]-&gt;setConstant(</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>motor_controls_in_[control_it-&gt;first]-&gt;accessCopy());</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>dynamic_graph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/device_simulator.cpp"/>
  </compounddef>
</doxygen>
